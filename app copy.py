import streamlit as st
from itsdangerous import URLSafeSerializer, BadSignature
import os
from dotenv import load_dotenv
from streamlit.components.v1 import html, iframe as components_iframe
import pandas as pd
from sqlalchemy import create_engine, text

load_dotenv()
DB_URL = os.getenv("DATABASE_URL")
if not DB_URL:
    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è DB_URL: –∑–∞–¥–∞–π—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    st.stop()
engine = create_engine(DB_URL, echo=False)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
token_key = os.getenv("FNS_TOKEN")
if not token_key:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FNS_TOKEN: –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ secrets.toml")
    st.stop()

serializer = URLSafeSerializer(token_key, salt="uid-salt")

# –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º JS –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
html("""
<script>
  window.addEventListener('message', e => {
    const token = e.data;
    parent.window.authToken = token;
    parent.postMessage({ auth: token }, "*");
  }, false);
</script>
""", height=0)

components_iframe(src="https://ai5.space", height=60, scrolling=True)

# –ü–æ–ª—É—á–∞–µ–º query-–ø–∞—Ä–∞–º–µ—Ç—Ä auth
query_params = st.experimental_get_query_params()
token = query_params.get("auth", [None])[0] or st.session_state.get("auth_token")

# –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –µ—â—ë –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JS
if not token:
    try:
        from streamlit_javascript import st_javascript
        token_js = st_javascript("window.authToken")
    except ImportError:
        token_js = None

    if token_js:
        st.session_state.auth_token = token_js
        st.experimental_rerun()
    else:
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω –≤ iframe –≤—ã—à–µ.")
        st.stop()

# –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º token
try:
    uid = serializer.loads(token)
except BadSignature:
    st.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
    st.stop()

# uid –µ—Å—Ç—å ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–±–æ—Ç–µ —Å –ë–î
st.success(f"‚úÖ Logged in as user: {uid}")

# –ó–¥–µ—Å—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
# –ü—Ä–∏–º–µ—Ä:
# engine = create_engine(os.getenv("DATABASE_URL"))
# import pandas as pd

# –í—ã–ø–æ–ª–Ω—è–µ–º select –ø–æ—Å–ª–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ uid –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
try:
    df = pd.read_sql(
        text("SELECT * FROM purchases WHERE user_id = :uid"),
        engine,
        params={"uid": uid}
    )
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    st.stop()

st.write("üìã **–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏**")
edited = st.data_editor(df, use_container_width=True)

# –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"
if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
    try:
        with engine.begin() as conn:
            conn.execute(text("DELETE FROM purchases WHERE user_id = :uid"), {"uid": uid})
        edited["user_id"] = uid
        edited.to_sql("purchases", engine, if_exists="append", index=False)
        st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
