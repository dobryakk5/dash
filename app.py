import streamlit as st
import pandas as pd
from itsdangerous import URLSafeSerializer, BadSignature
import os
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from streamlit.components.v1 import html, iframe as components_iframe

# Load environment variables
load_dotenv()

# Database connection
# Ensure you have DB_URL defined in .env or Streamlit secrets
DB_URL = os.getenv("DATABASE_URL")
if not DB_URL:
    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è DB_URL: –∑–∞–¥–∞–π—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    st.stop()
engine = create_engine(DB_URL, echo=False)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (iframe auth)
token_key = os.getenv("FNS_TOKEN")
if not token_key:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FNS_TOKEN: –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ secrets.toml")
    st.stop()
serializer = URLSafeSerializer(token_key, salt="uid-salt")

# 1) –ü—Ä–∏—ë–º —Ç–æ–∫–µ–Ω–∞ –∏–∑ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –æ–∫–Ω–∞ —á–µ—Ä–µ–∑ JS
html("""
<script>
  window.addEventListener('message', e => {
    const token = e.data;
    parent.window.authToken = token;
    parent.postMessage({ auth: token }, "*");
  }, false);
</script>
""", height=0)

# 2) –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º iframe –¥–ª—è –ª–æ–≥–∏–Ω–∞
def show_login_iframe():
    components_iframe(src="https://ai5.space", height=60, scrolling=True)

show_login_iframe()

# 3) –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ query params –∏–ª–∏ —Å–µ—Å—Å–∏–∏
query_params = st.experimental_get_query_params()
token = query_params.get("auth", [None])[0] or st.session_state.get("auth_token")

# 4) –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ JS-–≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
if not token:
    try:
        from streamlit_javascript import st_javascript
        token_js = st_javascript("window.authToken")
    except ImportError:
        token_js = None

    if token_js:
        st.session_state.auth_token = token_js
        st.experimental_rerun()
    else:
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω –≤ iframe –≤—ã—à–µ.")
        st.stop()

# 5) –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
try:
    uid_iframe = serializer.loads(token)
    st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, iframe user_id = {uid_iframe}")
except BadSignature:
    st.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
    st.stop()

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===

# DEV MODE –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram)
DEV_MODE = st.sidebar.checkbox("DEV_MODE (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram)", value=False)

if DEV_MODE:
    uid = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è —Ç–µ—Å—Ç–∞", value=str(uid_iframe))
    if not uid:
        st.warning("–í–≤–µ–¥–∏—Ç–µ user_id –≤ —Ä–µ–∂–∏–º–µ DEV_MODE")
        st.stop()
    st.info(f"üîß –†–µ–∂–∏–º DEV: –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id = {uid}")
else:
    # Telegram Login
    from streamlit_telegram_login import TelegramLoginWidgetComponent
    API_TOKEN = os.getenv("API_TOKEN")
    if not API_TOKEN:
        st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è API_TOKEN –¥–ª—è Telegram Login")
        st.stop()
    telegram_login = TelegramLoginWidgetComponent(
        bot_username="fin_a_bot",
        secret_key=API_TOKEN
    )
    user_info = telegram_login.button
    if not user_info:
        st.info("üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram")
        st.stop()
    uid = user_info["id"]
    st.success(f"–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ Telegram ID: {uid}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ user_id
df = pd.read_sql(
    text("SELECT * FROM purchases WHERE user_id = :uid"),
    engine,
    params={"uid": uid}
)

st.write("üìã **–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏**")
edited = st.data_editor(df, use_container_width=True)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ –∫–ª–∏–∫–µ
if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
    with engine.begin() as conn:
        conn.execute(
            text("DELETE FROM purchases WHERE user_id = :uid"),
            {"uid": uid}
        )
    edited["user_id"] = uid
    edited.to_sql("purchases", engine, if_exists="append", index=False)
    st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
