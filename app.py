import streamlit as st
from itsdangerous import URLSafeSerializer, BadSignature
from urllib.parse import parse_qs
from streamlit.components.v1 import html, iframe

serializer = URLSafeSerializer(os.getenv("FNS_TOKEN"), salt="uid-salt")

# 1) –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º iframe —Å –ª–æ–≥–∏–Ω–æ–º
html("""
<script>
  window.addEventListener('message', e => {
    const token = e.data;
    parent.window.authToken = token;
    // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è
    if (window.parent) window.parent.postMessage(token, '*');
  }, false);
</script>
""")

iframe("RemoteAuthPageURL", key="auth_frame")

# 2) –ü–æ—Å–ª–µ iframe ‚Äî JS-—Ç–∞–π–º–µ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è token
token = st_js = st.experimental_get_query_params().get("auth", [None])[0] if False else None
token = st_js or st.session_state.get("auth_token")

if not token:
    token_js = st_javascript("parent.window.authToken", key="grab_token")
    if token_js:
        st.session_state.auth_token = token_js
        st.experimental_rerun()
    st.stop()

# 3) –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
try:
    uid = serializer.loads(st.session_state.auth_token)
    st.success(f"Logged in as user: {uid}")
except BadSignature:
    st.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")


# ‚îÄ‚îÄ‚îÄ 5) –¢–æ–∫–µ–Ω –∏ uid –≤–∞–ª–∏–¥–Ω—ã ‚Äî –¥–∞–ª—å—à–µ –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, user_id =", uid)
# ‚Ä¶–∑–¥–µ—Å—å –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –≤ –±–∞–∑—É, –≤—ã–¥–∞—á–∞ —Ç–∞–±–ª–∏—Ü –∏ —Ç.–¥.

# 1. –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ vs. –ø—Ä–æ–¥–∞–∫—à–Ω
DEV_MODE = st.sidebar.checkbox("DEV_MODE (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)", value=False)

if DEV_MODE:
    # ‚Äî –ë–µ–∑ –ª–æ–≥–∏–Ω–∞: –±–µ—Ä—ë–º user_id –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞
    uid = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è —Ç–µ—Å—Ç–∞", value="7852511755")
    if not uid:
        st.warning("–í–≤–µ–¥–∏—Ç–µ user_id")
        st.stop()
    st.info(f"üîß –†–µ–∂–∏–º DEV: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è user_id = {uid}")
else:
    # ‚Äî Telegram Login
    from streamlit_telegram_login import TelegramLoginWidgetComponent
    API_TOKEN = os.getenv("API_TOKEN")
    telegram_login = TelegramLoginWidgetComponent(
        bot_username="fin_a_bot",
        secret_key=API_TOKEN
    )
    user_info = telegram_login.button
    if not user_info:
        st.info("üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram")
        st.stop()
    uid = user_info["id"]
    st.success(f"–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ Telegram ID: {uid}")

# 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id
#
# –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ psycopg2, –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLAlchemy.text + –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã :uid.
# –≠—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–π —Å–ø–æ—Å–æ–±: –¥—Ä–∞–π–≤–µ—Ä —Å–∞–º –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
# –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä—è–º–æ–≥–æ pyformat, –Ω–æ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –≤—ã—à–µ.

df = pd.read_sql(
    text("SELECT * FROM purchases WHERE user_id = :uid"),
    engine,
    params={"uid": uid}
)

st.write("üìã **–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏**")
edited = st.data_editor(df, use_container_width=True)

# 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
    with engine.begin() as conn:
        # —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn.execute(
            text("DELETE FROM purchases WHERE user_id = :uid"),
            {"uid": uid}
        )
    # –∑–∞—Ç–µ–º –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ edited
    edited["user_id"] = uid
    edited.to_sql("purchases", engine, if_exists="append", index=False)
    st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
