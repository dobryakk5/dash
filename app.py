import os
import streamlit as st
import pandas as pd
from sqlalchemy import create_engine, text
from dotenv import load_dotenv
from itsdangerous import URLSafeSerializer, BadSignature
from streamlit_javascript import st_javascript
from urllib.parse import parse_qs, urlparse

load_dotenv()
engine = create_engine(os.getenv("DATABASE_URL"))
serializer = URLSafeSerializer(os.getenv("FNS_TOKEN"), salt="uid-salt")

# 1. –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ (–∫–ª—é—á ‚Äî "js_url")
url = st_javascript(
    "await fetch('').then(_ => window.parent.location.href)",
    key="js_url"
)
st.write("URL:", url)  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

# 2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ parent.window.token (–∫–ª—é—á ‚Äî "js_token")
token = st_javascript(
    "await fetch('').then(_ => parent.window.token)",
    key="js_token"
)

# 3. –ï—Å–ª–∏ –≤ URL –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä auth ‚Äî –ø–∞—Ä—Å–∏–º –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º token
if url:
    qs = urlparse(url).query
    params = parse_qs(qs)
    auth_token = params.get("auth", [None])[0]
    if auth_token:
        token = auth_token

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω
if not token:
    st.warning("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ JS, –Ω–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö URL.")
    st.stop()

st.write("–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω:", token)

try:
    uid = serializer.loads(token)
    st.success(f"–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–ª–∏ uid: {uid!r}")
except BadSignature as e:
    st.error(f"BadSignature ‚Äî —Ç–æ–∫–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω: {e}")
    st.stop()
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
    st.stop()

# –î–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å uid...


# 1. –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ vs. –ø—Ä–æ–¥–∞–∫—à–Ω
DEV_MODE = st.sidebar.checkbox("DEV_MODE (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)", value=False)

if DEV_MODE:
    # ‚Äî –ë–µ–∑ –ª–æ–≥–∏–Ω–∞: –±–µ—Ä—ë–º user_id –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞
    uid = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è —Ç–µ—Å—Ç–∞", value="7852511755")
    if not uid:
        st.warning("–í–≤–µ–¥–∏—Ç–µ user_id")
        st.stop()
    st.info(f"üîß –†–µ–∂–∏–º DEV: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è user_id = {uid}")
else:
    # ‚Äî Telegram Login
    from streamlit_telegram_login import TelegramLoginWidgetComponent
    API_TOKEN = os.getenv("API_TOKEN")
    telegram_login = TelegramLoginWidgetComponent(
        bot_username="fin_a_bot",
        secret_key=API_TOKEN
    )
    user_info = telegram_login.button
    if not user_info:
        st.info("üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram")
        st.stop()
    uid = user_info["id"]
    st.success(f"–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ Telegram ID: {uid}")

# 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id
#
# –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ psycopg2, –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLAlchemy.text + –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã :uid.
# –≠—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–π —Å–ø–æ—Å–æ–±: –¥—Ä–∞–π–≤–µ—Ä —Å–∞–º –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
# –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä—è–º–æ–≥–æ pyformat, –Ω–æ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –≤—ã—à–µ.

df = pd.read_sql(
    text("SELECT * FROM purchases WHERE user_id = :uid"),
    engine,
    params={"uid": uid}
)

st.write("üìã **–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏**")
edited = st.data_editor(df, use_container_width=True)

# 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
    with engine.begin() as conn:
        # —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn.execute(
            text("DELETE FROM purchases WHERE user_id = :uid"),
            {"uid": uid}
        )
    # –∑–∞—Ç–µ–º –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ edited
    edited["user_id"] = uid
    edited.to_sql("purchases", engine, if_exists="append", index=False)
    st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
