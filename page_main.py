import streamlit as st
from itsdangerous import URLSafeSerializer, BadSignature
import os
from dotenv import load_dotenv
from streamlit.components.v1 import html, iframe as components_iframe
import pandas as pd
from sqlalchemy import create_engine, text
import locale
import warnings
import logging
import page_main, page_detail


# –£–±–∏—Ä–∞–µ–º –º–µ–Ω—é, —Ö–µ–¥–µ—Ä –∏ —Ñ—É—Ç–µ—Ä —á–µ—Ä–µ–∑ CSS
st.markdown(
    """
    <style>
      /* –°–∫—Ä—ã–≤–∞–µ–º —Ç—É–ª–±–∞—Ä (Deploy‚Äë–∫–Ω–æ–ø–∫—É –∏ –≥–∞–º–±—É—Ä–≥–µ—Ä‚Äë–º–µ–Ω—é) */
      .stAppToolbar,
      [data-testid="stToolbar"],
      [data-testid="stAppDeployButton"] {
        display: none !important;
        visibility: hidden !important;
        height: 0 !important;
        margin: 0 !important;
        padding: 0 !important;
      }

      /* –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ ‚Äî –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é */
      iframe.stIFrame {
        display: none !important;
        height: 0 !important;
        visibility: hidden !important;
      }
      #MainMenu, header, footer {
        visibility: hidden !important;
      }
      .reportview-container .main .block-container,
      .stApp .main .block-container,
      section.stMain .block-container,
      div[data-testid="stMainBlockContainer"] {
        padding-top: 0 !important;
        margin-top: 0 !important;
      }
      section[data-testid="stSidebar"] > div:first-child {
        top: 0 !important;
        height: 100vh !important;
      }
    </style>
    """,
    unsafe_allow_html=True,
)

# ‚îÄ‚îÄ‚îÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –ª–æ–∫–∞–ª—å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
engine = create_engine(os.getenv("DATABASE_URL"))

if "uid" not in st.session_state:
        st.error("UID –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
uid = st.session_state["uid"]
st.write("UID –∏–∑ session_state:", uid)

try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except locale.Error:
    pass  # –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

# ‚îÄ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
df = pd.read_sql(
    text("""
        SELECT id,
               category,
               subcategory,
               price,
               ts
        FROM purchases
        WHERE user_id = :uid
    """),
    engine,
    params={"uid": uid}
)

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
df['ts'] = pd.to_datetime(df['ts'], errors='coerce')
df['–î–∞—Ç–∞'] = df['ts'].dt.strftime('%-d %B %Y')

# –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–æ–ª–±—Ü—ã
df = df[['id', 'category', 'subcategory', 'price', '–î–∞—Ç–∞']]
df.columns = ['id', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–¶–µ–Ω–∞', '–î–∞—Ç–∞']

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–∏—Ñ—Ñ–∞
if 'orig_df' not in st.session_state:
    st.session_state.orig_df = df.copy()

st.write("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ª—é–±–æ–µ –ø–æ–ª–µ –∏ –Ω–∞–∂–º–∏—Ç–µ üíæ –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π")
edited = st.data_editor(
    df.drop(columns=['id']),               # id —Å–∫—Ä—ã–≤–∞–µ–º, –Ω–æ –æ–Ω –≤ orig_df
    use_container_width=True,
    key='data_editor'
)
# –ü—Ä–∏–≤—è–∂–µ–º id –æ–±—Ä–∞—Ç–Ω–æ –∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É df
edited['id'] = st.session_state.orig_df['id']

# ‚îÄ‚îÄ‚îÄ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î (–¥–∏—Ñ—Ñ–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—á–µ–∫
    new = edited.rename(columns={
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "category",
        "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "subcategory",
        "–¶–µ–Ω–∞": "price",
        "–î–∞—Ç–∞": "ts"
    }).copy()
    new['ts'] = pd.to_datetime(new['ts'], format='%d %B %Y', errors='coerce')
    new['user_id'] = uid

    orig = st.session_state.orig_df.rename(columns={
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "category",
        "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "subcategory",
        "–¶–µ–Ω–∞": "price",
        "–î–∞—Ç–∞": "ts"
    }).copy()
    orig['ts'] = pd.to_datetime(orig['ts'], format='%d %B %Y', errors='coerce')
    orig['user_id'] = uid

    key = ['id']

    # 1) –ù–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ (id == NaN –∏–ª–∏ –Ω–µ –≤ orig)
    new_rows = new[~new['id'].isin(orig['id'])]
    # 2) –£–¥–∞–ª—ë–Ω–Ω—ã–µ (–±—ã–ª–∏ –≤ orig, –Ω–µ—Ç –≤ new)
    deleted_ids = orig.loc[~orig['id'].isin(new['id']), 'id'].tolist()
    # 3) –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ: –æ–±—â–∏–µ id, –Ω–æ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
    common_ids = set(orig['id']).intersection(new['id'])
    diffs = []
    for idx in common_ids:
        o = orig.set_index('id').loc[idx]
        n = new.set_index('id').loc[idx]
        if not o[['category','subcategory','price','ts']].equals(n[['category','subcategory','price','ts']]):
            diffs.append(idx)
    updated_rows = new.set_index('id').loc[diffs].reset_index()

    # –ó–∞–ø–∏—Å—å –≤ –ë–î
    with engine.begin() as conn:
        # —É–¥–∞–ª—è–µ–º
        if deleted_ids:
            conn.execute(
                text("DELETE FROM purchases WHERE id = ANY(:ids)"),
                {"ids": deleted_ids}
            )
        # –æ–±–Ω–æ–≤–ª—è–µ–º
        for _, row in updated_rows.iterrows():
            conn.execute(
                text("""
                    UPDATE purchases
                       SET category    = :category,
                           subcategory = :subcategory,
                           price       = :price,
                           ts          = :ts
                     WHERE id = :id
                """),
                {
                    "category": row["category"],
                    "subcategory": row["subcategory"],
                    "price": row["price"],
                    "ts": row["ts"],
                    "id": row["id"],
                }
            )
        # –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        if not new_rows.empty:
            new_rows.drop(columns=['id']).to_sql(
                "purchases", conn, if_exists="append", index=False
            )

    st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ –±–∞–∑–µ!")
    # –û–±–Ω–æ–≤–ª—è–µ–º orig_df
    st.session_state.orig_df = edited.copy()

if st.button("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É—é"):
        st.switch_page("page_detail")